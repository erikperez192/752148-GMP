<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize

vsp = 0;
hsp = 0;
grav = 0.5;
grounded = 0;
state = move_state;

image_speed = room_speed / 180

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
script_execute(state);


/*key_left = keyboard_check_direct(ord("A"));
key_right = keyboard_check_direct(ord("D"));
key_lm = keyboard_check_direct(mb_left);
key_jump = keyboard_check_direct(vk_space);

move = key_left + key_right;


// move left and right
if (key_left){
    hsp = -4;
    image_xscale = -1;
    sprite_index = spr_player_movement;
}

if (key_right){
    hsp = 4;
    image_xscale = 1;
    sprite_index = spr_player_movement;
}

//Neutral input = 0 movement
if ((key_right &amp;&amp; key_left) or (!key_right &amp;&amp; !key_left)){
    hsp = 0;
}

// Jumping
if (key_jump){
    if (grounded) vsp = -10;
    //sprite_index = spr_player_jump;
}

vsp += grav;

// vertical collision
if place_meeting(x,y+vsp,parent_wall){
    while ( !place_meeting(x,y+1,parent_wall)) y+=1;
    vsp = 0;
    grounded = 1;
}
else{
    grounded = 0;
}

//Horizontal Colision
if place_meeting(x+hsp,y,parent_wall){
    while (!place_meeting(x+sign(hsp),y,parent_wall)) x+=sign(hsp);
    hsp = 0;
}

// commit movement
x += hsp;
y += vsp;

//animate
//if (move!=0) image_xscale = move; // This code conflicts with another movement code //do not used
if (place_meeting(x,y+1,parent_wall)){
    if (hsp!=0) sprite_index = spr_player_movement; else sprite_index = spr_player
}else{
    if (vsp &lt; 0) sprite_index = spr_player_jump; else sprite_index = spr_player_fall;
}

/*if (key_lm){
    sprite_index = spr_trans_naga; //TODO fix the animation so that the left mouse click does an attack everytime is press and returns to idle when is done
}*/


/////////////////////////////////////////////////////////////
// Experimental code for switching animations
/*if (grounded){
    if (hsp==0){
    sprite_index = spr_player;}
}else{
    if (sprite_index!=spr_player_movement) image_index = 0;
    sprite_index = spr_player_movement
}else{
    is (vps&lt;0){
        sprite_index = spr_player_jump
    }
}*/ 




// simple moving code
/*{
 switch (keyboard_key)  // Working movement code
    {
    case vk_left:
    case ord("A"):
       hsp -= 4;
       image_xscale = -1;
       sprite_index = spr_player_movement;
       break;
    case vk_right:
    case ord("D"):
       x += 4;
       image_xscale = 1;
       sprite_index = spr_player_movement;
       break;
    case vk_up:
    case ord("W"):
       vsp -= 4;
       break;
    case vk_down:
    case ord("S"):
       vsp += 4;
       break;
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change state

state = jump_state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attack

state = attack_state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
